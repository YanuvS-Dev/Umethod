l[[i]] <- data.frame(Gene = names(sort(Uscorestats[,i],decreasing = T)),
Cluster = i,Uscore =sort(Uscorestats[,i],decreasing = T),
adj.p.value = UscoreszPvalue[names(sort(Uscorestats[,i],decreasing = T)),i],
P_in = Pin[names(sort(Uscorestats[,i],decreasing = T)),i],
P_out = Pout[names(sort(Uscorestats[,i],decreasing = T)),i])
}
l_out <- l[[1]]
for(i in colnames(Uscorestats)[-1])
{
l_out <- rbind(l_out,l[[i]])
}
return(l_out[which( l_out$adj.p.value < p.threshold & l_out$P_in >= P_in.thersh & l_out$P_out <= P_out.thersh ),])
}
genes_list <- FindUniqueMarkers(obj = seurat_Full,group_by = "Celltype",method = "none",
smallcluster = c("CAFelse","SmallElse"),progresstext = F)
genes_list
genes_list <- FindUniqueMarkers(obj = seurat_Full,group_by = "Celltype",method = "none",
smallcluster = c("CAFelse","SmallElse"),progresstext = T)
devtools::install_github("YanuvS/Umethod")
detach("package:Umethod", unload = TRUE)
devtools::install_github("YanuvS/Umethod")
library(Umethod)
Umethod::FindUniqueMarkers
rmarkdown::render("README.Rmd", output_format = "md_document")
seurat_Full <- readRDS("C:\\Migration\\R projects\\Umethod\\ColonSinglecellDataLeesUmethod.rds")
set.seed(123)  # For reproducibility
# Subsample 10% of the cells
subsampled_cells <- sample(Cells(seurat_Full ), size = floor(0.1 * ncol(seurat_Full )))
# Subset the Seurat object
seurat_subsampled <- subset(seurat_Full, cells = subsampled_cells)
seurat_subsampled
seurat_Full
saveRDS("C:\\Migration\\R projects\\Umethod\\ColonSinglecellDataLeesUmethodSubsampled10.rds")
saveRDS(seurat_subsampled ,"C:\\Migration\\R projects\\Umethod\\ColonSinglecellDataLeesUmethodSubsampled10.rds")
seurat_Full <- readRDS("data/ColonscdataLeesUmethod.rds")
seurat_Full <- readRDS("data/ColonSinglecellDataLeesUmethodSubsampled10.rds")
genes_list <- FindUniqueMarkers(
obj = seurat_Full,
group_by = "Celltype",
method = "none",
smallcluster = c("CAFelse", "SmallElse"),
progresstext = F)
head(genes_list)
# Choose thresholds
Uscore <- 0.25
p_in <- 0.4
p_out <- 0.3
# Pulling the top 5 markers and the name of the top U marker for each cluster
genesetshort <- unlist(sapply(split(genes_list[genes_list$Uscore > Uscore & genes_list$P_in > p_in & genes_list$P_out < p_out,],genes_list[genes_list$Uscore > Uscore & genes_list$P_in > p_in& genes_list$P_out < p_out,]$Cluster),function(x){x[[1]][1]}))
genesetlong <- unique(unlist(sapply(split(genes_list[genes_list$Uscore > Uscore & genes_list$P_in > p_in& genes_list$P_out < p_out,],genes_list[genes_list$Uscore > Uscore & genes_list$P_in > p_in& genes_list$P_out < p_out,]$Cluster),function(x){x[[1]][1:5]})))
genesetlong
clusterorder<- c("CAF","General.Fibro","Adamdec1.Fibro","Normal.Muscle","Sox6..Stroma","CAP.else","Endothelial","Macrofague","T.cells","B.cells","Plasma","Epithelial","Cancer")
# Ordering the clusters that had any umarkers from genesetlong for dotplot
indclusters <- rep(NA,dim(genesetlong)[2])
for(i in 1:dim(genesetlong)[2]){indclusters[i] <- which(colnames(genesetlong) == clusterorder[i])}
genesetlong <- genesetlong[,indclusters]
genesetshort <- genesetshort[indclusters]
plot_grid(plot_grid(DimPlot(object = seurat_Full, reduction = "UMAP_on_harmony",pt.size = 0.5, group.by = "Celltype"),
DotPlot(seurat_Full,features = c(genesetlong),group.by = "Celltype",scale = F) + theme(axis.text.x = element_text(angle = 90,vjust = -0.0001)),ncol = 1),
FeaturePlot(object = seurat_Full, features = genesetshort, cols = c("gray", "blue"),reduction = "UMAP_on_harmony",ncol = 3,order = T),ncol = 2)
rmarkdown::render("README.Rmd", output_format = "md_document")
git log --oneline
remotes::install_github("samuel-marsh/scCustomize")
devtools::check()
devtools::check()
devtools::check()
rmarkdown::render("NEWS.rmd", output_format = "md_document")
devtools::document() # Update documentation
devtools::build()
devtools::build()
rmarkdown::render("NEWS.rmd", output_format = "md_document")
version
rmarkdown::render("README.rmd", output_format = "md_document")
remotes::install_github("YanuvS-Dev/Umethod")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
remotes::install_github("YanuvS-Dev/Umethod")
devtools::build()
devtools::check()
devtools::check()
devtools::check()
remove.packages("Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
devtools::check()
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remove.packages("Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remove.packages("Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remove.packages("Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
devtools::check(cran = TRUE)
usethis::use_gpl3_license()
devtools::check()
devtools::document()
devtools::document()
devtools::check_cran()
devtools::check(remote = TRUE, cran = TRUE)
dir.create("inst/extdata", recursive = TRUE, showWarnings = FALSE)
file.copy("data/ColonSinglecellDataLeesUmethodSubsampled10.rds", "inst/extdata/")
importFrom(dplyr, %>%)
devtools::check(remote = TRUE, cran = TRUE)
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod",force = T)
detach("package:Umethod", unload = TRUE)
remotes::install_github("YanuvS-Dev/Umethod",force = T)
seurat_Full <- readRDS(system.file("extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod"))
devtools::build()
remove.packages("Umethod")
detach("package:Umethod", unload = TRUE)
remotes::install_github("YanuvS-Dev/Umethod")
seurat_Full <- readRDS(system.file("extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod"))
file.exists(system.file("inst\extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod"))
file.exists(system.file("inst/extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod"))
file.exists(system.file("extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod"))
readRDS("inst/extdata/ColonSinglecellDataLeesUmethodSubsampled10.rds")
system.file("extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod")
system.file("extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
system.file("extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod")
rds_url <- "https://github.com/YanuvS-Dev/Umethod/raw/master/inst/extdata/ColonSinglecellDataLeesUmethodSubsampled10.rds"
seurat_Full <- readRDS(url(rds_url, "rb"))
rds_url <- "https://github.com/YanuvS-Dev/Umethod/raw/master/inst/extdata/ColonSinglecellDataLeesUmethodSubsampled10.rds"seurat_Full <- readRDS(url(rds_url, "rb"))
rmarkdown::render("README.rmd", output_format = "md_document")
devtools::document()
devtools::build()
devtools::check(remote = TRUE, cran = TRUE)
file.rename("h origin master", "h_origin_master")
unlink("data", recursive = TRUE)
package_directory <- "." # Or specify the actual path if it's not the current directory
all_files <- list.files(package_directory, recursive = TRUE) # recursive = TRUE lists files in subdirectories
print(all_files)
Lotto <- read.csv("C:/Users/yanuv/Downloads/Lotto.csv", comment.char="#")
seurat_Full <- readRDS("C:/Users/yanuv/Downloads/StromaldataHarmonized.rds")
genes_list <- FindUniqueMarkers(
obj = seurat_Full,
group_by = "RNA_snn_res.0.15",
method = "none")
genes_list
rds_url <- "https://github.com/YanuvS-Dev/Umethod/raw/master/inst/extdata/ColonSinglecellDataLeesUmethodSubsampled10.rds"
seurat_Full <- readRDS(url(rds_url, "rb"))
genes_list <- FindUniqueMarkers(
obj = seurat_Full,
group_by = "Celltype",
method = "none",
smallcluster = c("CAFelse", "SmallElse"))
genes_list
head(genes_list)
seurat_Full <- readRDS("C:/Users/yanuv/Downloads/StromaldataHarmonized.rds")
obj <- seurat_Full
group_by <- RNA_snn_res.0.15
group_by <- "RNA_snn_res.0.15"
p.threshold = 1
threshold = 0
P_in.thersh = 0
P_out.thersh = 1
varfeatures = NULL
smallcluster = NULL
method = "BH"
progresstext = T
jumpFix = 200
# Define variables
nvarfeatures <- length(row.names(obj))
jumpind <- seq(0, nvarfeatures, jumpFix)
# Create an empty data frame with genes as rows and clusters as columns
clusters <- unique(obj@meta.data[[group_by]])
percent_stats <- data.frame(matrix(0, nrow = nvarfeatures, ncol = length(clusters)))
rownames(percent_stats) <- row.names(obj)
colnames(percent_stats) <- clusters
# Calculate initial percentages
initial_percent <- Percent_Expressing(seurat_object = obj, features = row.names(obj)[1:jumpFix], threshold = threshold, group_by = group_by)
percent_stats[rownames(initial_percent), colnames(initial_percent)] <- initial_percent
# Loop with progress bar
for (i in 1:(length(jumpind) - 2)) {
if(progresstext){progress(i, max.value = length(jumpind) - 2)}
features <- row.names(obj)[(jumpind[i] + 1):jumpind[i + 1]]
temp_percent <- Percent_Expressing(seurat_object = obj, features = features, threshold = threshold, group_by = group_by)
percent_stats[rownames(temp_percent), colnames(temp_percent)] <- temp_percent
}
percent_stats
obj@meta.data
obj@meta.data[[group_by]]
percent_stats
# Create an empty data frame with genes as rows and clusters as columns
clusters <- unique(obj@meta.data[[group_by]])
clusters
group_by
obj@meta.data[[group_by]]
data.frame(matrix(0, nrow = nvarfeatures, ncol = length(clusters)))
unique(obj@meta.data[[group_by]])
as.character(unique(obj@meta.data[[group_by]]))
# Create an empty data frame with genes as rows and clusters as columns
clusters <- as.character(unique(obj@meta.data[[group_by]]))
percent_stats <- data.frame(matrix(0, nrow = nvarfeatures, ncol = length(clusters)))
percent_stats
rownames(percent_stats) <- row.names(obj)
colnames(percent_stats) <- clusters
# Calculate initial percentages
initial_percent <- Percent_Expressing(seurat_object = obj, features = row.names(obj)[1:jumpFix], threshold = threshold, group_by = group_by)
percent_stats[rownames(initial_percent), colnames(initial_percent)] <- initial_percent
# Loop with progress bar
for (i in 1:(length(jumpind) - 2)) {
if(progresstext){progress(i, max.value = length(jumpind) - 2)}
features <- row.names(obj)[(jumpind[i] + 1):jumpind[i + 1]]
temp_percent <- Percent_Expressing(seurat_object = obj, features = features, threshold = threshold, group_by = group_by)
percent_stats[rownames(temp_percent), colnames(temp_percent)] <- temp_percent
}
percent_stats
remove.packages("Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
library(Umethod)
library(Umethod)
library(Umethod)
remotes::install_github("YanuvS-Dev/Umethod")
library(Umethod)
remotes::install_github("YanuvS-Dev/Umethod")
rds_url <- "https://github.com/YanuvS-Dev/Umethod/raw/master/inst/extdata/ColonSinglecellDataLeesUmethodSubsampled10.rds"
seurat_Full <- readRDS(url(rds_url, "rb"))
# Apply Umethod functions, if there are small/mixed clusters, their name should be added to smallcluster variable to omit them.
# The progress bar prints weird massages, in this rmd file I suppress it
genes_list <- FindUniqueMarkers(
obj = seurat_Full,
group_by = "Celltype",
method = "none",
smallcluster = c("CAFelse", "SmallElse"))
obj <- seurat_Full
group_by = "Celltype"
p.threshold = 1
threshold = 0
P_in.thersh = 0
varfeatures = NULL
smallcluster = NULL
method = "BH"
smallcluster = c("CAFelse", "SmallElse")
# Determine expression matrix format
expr_matrix <- if (class(obj[["RNA"]])[1] == "Assay5") {
obj@assays$RNA@layers$counts
}else
{
obj@assays$RNA@counts
}
groups <- obj@meta.data[[group_by]]
if (is.null(varfeatures)) {
varfeatureschoose <- rownames(obj)
}
# Binarize expression matrix based on threshold
binary_matrix <- expr_matrix[row.names(obj) %in% varfeatureschoose, ] > threshold
# Compute percentage of expressing cells per cluster
if(any("factor" %in% class(groups)))
{
clusters <- levels(groups)
}else
{
clusters <- unique(groups)
}
percent_stats <- sapply(clusters, function(cluster) {
rowMeans(binary_matrix[, groups == cluster]) * 100
})
clusters
binary_matrix
groups
binary_matrix
groups == cluster
cluster
class(groups)
clusters
binary_matrix[, groups == "CAF"]
clusters
percent_stats <- sapply(clusters, function(cluster) {
rowMeans(binary_matrix[, groups == cluster]) * 100
})
table(groups)
class(groups)
levels(clusters)
clusters
clusters <- unique(groups)
clusters
percent_stats <- sapply(clusters, function(cluster) {
rowMeans(binary_matrix[, groups == cluster]) * 100
})
clusters <- levels(groups)
clusters
table(clusters)
table(groups)
groups
percent_stats <- sapply(clusters, function(cluster) {
rowMeans(binary_matrix[, which(groups == cluster)]) * 100
})
table(groups)
percent_stats <- sapply(clusters, function(cluster) {
rowMeans(binary_matrix[, groups == cluster],drop = FALSE) * 100
})
percent_stats <- sapply(clusters, function(cluster) {
rowMeans(binary_matrix[, groups == cluster,drop = FALSE]) * 100
})
cluster <- clusters[1]  # Pick the first cluster for testing
selected_cols <- which(groups == cluster)
print(selected_cols)
percent_stats <- sapply(clusters, function(cluster) {
selected_cols <- which(groups == cluster)  # Get matching column indices
if (length(selected_cols) > 1) {  # Ensure at least two columns exist
rowMeans(binary_matrix[, selected_cols, drop = FALSE]) * 100
} else if (length(selected_cols) == 1) {
binary_matrix[, selected_cols, drop = FALSE] * 100  # Return single column directly
} else {
rep(NA, nrow(binary_matrix))  # Return NA if no match
}
})
cluster <- clusters[1]
selected_cols <- which(groups == cluster)
subset_matrix <- binary_matrix[, selected_cols, drop = FALSE]
print(dim(subset_matrix))  # Check if it's actually a matrix
percent_stats <- sapply(clusters, function(cluster) {
selected_cols <- which(groups == cluster)  # Get matching column indices
subset_matrix <- binary_matrix[, selected_cols, drop = FALSE]  # Always keep it as a matrix
if (length(selected_cols) > 1) {
rowMeans(subset_matrix) * 100
} else if (length(selected_cols) == 1) {
as.numeric(subset_matrix) * 100  # Convert single-column matrix to numeric vector
} else {
rep(NA, nrow(binary_matrix))  # Return NA if no match
}
})
binary_matrix
binary_matrix[,1]
groups == cluster
rowMeans(binary_matrix[, groups == cluster]) * 100
binary_matrix[, groups == cluster]
rowMeans(binary_matrix[, groups == cluster])
binary_matrix[, names(groups) == cluster, drop = FALSE]
percent_stats <- sapply(clusters, function(cluster) {
rowMeans(binary_matrix[, names(groups) == cluster]) * 100
})
rowMeans(binary_matrix[, names(groups) == cluster,drop = FALSE]) * 100
rowMeans(binary_matrix[, names(groups) == cluster,drop = FALSE]) * 100
names(groups) == cluster
groups == cluster
rowMeans(binary_matrix[, groups == cluster,drop = FALSE])
binary_matrix
class(binary_matrix)
clusters
cluster
binary_matrix[, groups == cluster]
rowMeans(binary_matrix[, groups == cluster])
mean(binary_matrix[, groups == cluster]) * 100
mean(binary_matrix[, groups == cluster],na.rm = T) * 100
percent_stats <- sapply(clusters, function(cluster) {
colSums(binary_matrix[, groups == cluster]) / nrow(binary_matrix[, groups == cluster]) * 100
})
binary_matrix[, groups == cluster]
colSums(binary_matrix[, groups == cluster])
binary_matrix
as.vector(binary_matrix)
mean(as.vector(binary_matrix))
binary_matrix[, groups == cluster]
cluster
table(groups)
groups == cluster
binary_matrix[, groups == cluster]
rowMeans(binary_matrix[, groups == cluster])
dim(binary_matrix[, groups == cluster])
print(sum(groups == cluster))  # Should be 106 for your example
print(dim(binary_matrix[, groups == cluster, drop = FALSE]))
print(class(binary_matrix[, groups == cluster, drop = FALSE])
)
Matrix::rowMeans(binary_matrix[, groups == cluster]) * 100
percent_stats <- sapply(clusters, function(cluster) {
Matrix::rowMeans(binary_matrix[, groups == cluster]) * 100
})
rownames(percent_stats) <- varfeatureschoose
colnames(percent_stats) <- clusters
if(is.null(smallcluster)){
ind_column <- 1:length(clusters)
}else
{
ind_column <- c(1:length(clusters))[-which(colnames(percent_stats) %in% smallcluster)]
}
# Compute U-scores, Pin, and Pout
Uscorestats <- t(apply(percent_stats[,ind_column], 1, function(x) {
sorted_x <- sort(x / 100, decreasing = TRUE)
x / 100 - ifelse(sorted_x[1] == x / 100, sorted_x[2], sorted_x[1])
}))
Pout <- t(apply(percent_stats[,ind_column], 1, function(x) {
sorted_x <- sort(x / 100, decreasing = TRUE)
ifelse(sorted_x[1] == x / 100, sorted_x[2], sorted_x[1])
}))
Pin <- t(apply(percent_stats, 1, function(x) x / 100))
# Z-score transformation of U-scores
Uscoresz <- apply(Uscorestats, 2, function(x) {
(x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
})
# Adjusted p-values
UscoreszPvalue <- apply(Uscoresz, 2, function(x) {
p.adjust(1 - pnorm(x), method = method)
})
# Compile results into a data frame
l_out <- do.call(rbind, lapply(colnames(Uscorestats), function(i) {
data.frame(
Gene = rownames(Uscorestats),
Cluster = i,
Uscore = Uscorestats[, i],
adj.p.value = UscoreszPvalue[, i],
P_in = Pin[, i],
P_out = Pout[, i]
)
}))
# Filter based on thresholds
l_out <- l_out[l_out$adj.p.value < p.threshold & l_out$P_in >= P_in.thersh & l_out$P_out <= P_out.thersh, ]
l_out <- l_out[order(l_out$Cluster, -l_out$Uscore), ]
l_out
FindUniqueMarkers <- function(obj,
group_by,
p.threshold = 1,
threshold = 0,
P_in.thersh = 0,
P_out.thersh = 1,
varfeatures = NULL,
smallcluster = NULL,
method = "BH")
{
# Determine expression matrix format
expr_matrix <- if (class(obj[["RNA"]])[1] == "Assay5") {
obj@assays$RNA@layers$counts
}else
{
obj@assays$RNA@counts
}
groups <- obj@meta.data[[group_by]]
if (is.null(varfeatures)) {
varfeatureschoose <- rownames(obj)
}
# Binarize expression matrix based on threshold
binary_matrix <- expr_matrix[row.names(obj) %in% varfeatureschoose, ] > threshold
# Compute percentage of expressing cells per cluster
if(any("factor" %in% class(groups)))
{
clusters <- levels(groups)
}else
{
clusters <- unique(groups)
}
percent_stats <- sapply(clusters, function(cluster) {
Matrix::rowMeans(binary_matrix[, groups == cluster]) * 100
})
rownames(percent_stats) <- varfeatureschoose
colnames(percent_stats) <- clusters
if(is.null(smallcluster)){
ind_column <- 1:length(clusters)
}else
{
ind_column <- c(1:length(clusters))[-which(colnames(percent_stats) %in% smallcluster)]
}
# Compute U-scores, Pin, and Pout
Uscorestats <- t(apply(percent_stats[,ind_column], 1, function(x) {
sorted_x <- sort(x / 100, decreasing = TRUE)
x / 100 - ifelse(sorted_x[1] == x / 100, sorted_x[2], sorted_x[1])
}))
Pout <- t(apply(percent_stats[,ind_column], 1, function(x) {
sorted_x <- sort(x / 100, decreasing = TRUE)
ifelse(sorted_x[1] == x / 100, sorted_x[2], sorted_x[1])
}))
Pin <- t(apply(percent_stats, 1, function(x) x / 100))
# Z-score transformation of U-scores
Uscoresz <- apply(Uscorestats, 2, function(x) {
(x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
})
# Adjusted p-values
UscoreszPvalue <- apply(Uscoresz, 2, function(x) {
p.adjust(1 - pnorm(x), method = method)
})
# Compile results into a data frame
l_out <- do.call(rbind, lapply(colnames(Uscorestats), function(i) {
data.frame(
Gene = rownames(Uscorestats),
Cluster = i,
Uscore = Uscorestats[, i],
adj.p.value = UscoreszPvalue[, i],
P_in = Pin[, i],
P_out = Pout[, i]
)
}))
# Filter based on thresholds
l_out <- l_out[l_out$adj.p.value < p.threshold & l_out$P_in >= P_in.thersh & l_out$P_out <= P_out.thersh, ]
l_out <- l_out[order(l_out$Cluster, -l_out$Uscore), ]
return(l_out)
}
remove.packages("Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
library(Umethod)
library(Umethod)
remove.packages("Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remove.packages("Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
