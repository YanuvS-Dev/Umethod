for(i in colnames(Uscorestats))
{
l[[i]] <- data.frame(Gene = names(sort(Uscorestats[,i],decreasing = T)),
Cluster = i,Uscore =sort(Uscorestats[,i],decreasing = T),
adj.p.value = UscoreszPvalue[names(sort(Uscorestats[,i],decreasing = T)),i],
P_in = Pin[names(sort(Uscorestats[,i],decreasing = T)),i],
P_out = Pout[names(sort(Uscorestats[,i],decreasing = T)),i])
}
l_out <- l[[1]]
for(i in colnames(Uscorestats)[-1])
{
l_out <- rbind(l_out,l[[i]])
}
return(l_out[which( l_out$adj.p.value < p.threshold & l_out$P_in >= P_in.thersh & l_out$P_out <= P_out.thersh ),])
}
FindUniqueMarkers <- function(obj,
group_by,
p.threshold = 1,
threshold = 0,
P_in.thersh = 0,
P_out.thersh = 1,
varfeatures = NULL,
smallcluster = NULL,
method = "BH",
jumpFix = 200) # to fix the assay problem
{
if(is.null(varfeatures))
{
# Define variables
nvarfeatures <- length(row.names(obj))
jumpind <- seq(0, nvarfeatures, jumpFix)
# Create an empty data frame with genes as rows and clusters as columns
clusters <- unique(obj@meta.data[[group_by]])
percent_stats <- data.frame(matrix(0, nrow = nvarfeatures, ncol = length(clusters)))
rownames(percent_stats) <- row.names(obj)
colnames(percent_stats) <- clusters
# Calculate initial percentages
initial_percent <- Percent_Expressing(seurat_object = obj, features = row.names(obj)[1:jumpFix], threshold = threshold, group_by = group_by)
percent_stats[rownames(initial_percent), colnames(initial_percent)] <- initial_percent
# Loop with progress bar
for (i in 1:(length(jumpind) - 2)) {
progress(i, max.value = length(jumpind) - 2)
features <- row.names(obj)[(jumpind[i] + 1):jumpind[i + 1]]
temp_percent <- Percent_Expressing(seurat_object = obj, features = features, threshold = threshold, group_by = group_by)
percent_stats[rownames(temp_percent), colnames(temp_percent)] <- temp_percent
}
# Finish progress bar
progress(length(jumpind) - 2, max.value = length(jumpind) - 2)
}else
{
# Define variables
nvarfeatures <- length(varfeatures)
jumpind <- seq(0, nvarfeatures, jumpFix)
# Create an empty data frame with genes as rows and clusters as columns
clusters <- unique(obj@meta.data[[group_by]])
percent_stats <- data.frame(matrix(0, nrow = nvarfeatures, ncol = length(clusters)))
rownames(percent_stats) <- varfeatures
colnames(percent_stats) <- clusters
# Calculate initial percentages
initial_percent <- Percent_Expressing(seurat_object = obj, features = varfeatures[1:jumpFix], threshold = threshold, group_by = group_by)
percent_stats[rownames(initial_percent), colnames(initial_percent)] <- initial_percent
# Loop with progress bar
for (i in 1:(length(jumpind) - 2)) {
progress(i, max.value = length(jumpind) - 2)
features <- varfeatures[(jumpind[i] + 1):jumpind[i + 1]]
temp_percent <- Percent_Expressing(seurat_object = obj, features = features, threshold = threshold, group_by = group_by)
percent_stats[rownames(temp_percent), colnames(temp_percent)] <- temp_percent
}
# Finish progress bar
progress(length(jumpind) - 2, max.value = length(jumpind) - 2)
}
# Calculating u-scores, Pin and Pout
Uscorestats <- t(apply(percent_stats[,which(!(colnames(percent_stats) %in% smallcluster))],1,function(x){ifelse(sort(x/100, decreasing = TRUE)[1] - x/100 == 0,x/100 - sort(x/100, decreasing = TRUE)[2],x/100 - sort(x/100, decreasing = TRUE)[1])})) # (MI-max(MItag))
Pout <- t(apply(percent_stats[,which(!(colnames(percent_stats) %in% smallcluster))],1,function(x){ifelse(sort(x/100, decreasing = TRUE)[1] - x/100 == 0,sort(x/100, decreasing = TRUE)[2],sort(x/100, decreasing = TRUE)[1])})) # (MI-max(MItag))
Pin<- t(apply(percent_stats[,which(!(colnames(percent_stats) %in% smallcluster))],1,function(x){x/100})) # (MI-max(MItag))
Uscoresz <- apply(Uscorestats,2,function(x){(x-mean(x,na.rm = T))/sd(x,na.rm = T)})
order_ind <- sapply(as.list(colnames(Uscoresz)),function(x){names(sort(Uscoresz[,x],decreasing = T))})
# adjusted p-value calculation
UscoreszPvalue <- apply(Uscoresz,2,function(x){p.adjust(1 - pnorm(x),method = method)}) # NEW
###
l <- list()
for(i in colnames(Uscorestats))
{
l[[i]] <- data.frame(Gene = names(sort(Uscorestats[,i],decreasing = T)),
Cluster = i,Uscore =sort(Uscorestats[,i],decreasing = T),
adj.p.value = UscoreszPvalue[names(sort(Uscorestats[,i],decreasing = T)),i],
P_in = Pin[names(sort(Uscorestats[,i],decreasing = T)),i],
P_out = Pout[names(sort(Uscorestats[,i],decreasing = T)),i])
}
l_out <- l[[1]]
for(i in colnames(Uscorestats)[-1])
{
l_out <- rbind(l_out,l[[i]])
}
return(l_out[which( l_out$adj.p.value < p.threshold & l_out$P_in >= P_in.thersh & l_out$P_out <= P_out.thersh ),])
}
genes_list <- FindUniqueMarkers(obj = seurat_Full,group_by = "Celltype",method = "none",
smallcluster = c("CAFelse","SmallElse"))
FindUniqueMarkers <- function(obj,
group_by,
p.threshold = 1,
threshold = 0,
P_in.thersh = 0,
P_out.thersh = 1,
varfeatures = NULL,
smallcluster = NULL,
method = "BH",
jumpFix = 200) # to fix the assay problem
{
if(is.null(varfeatures))
{
# Define variables
nvarfeatures <- length(row.names(obj))
jumpind <- seq(0, nvarfeatures, jumpFix)
# Create an empty data frame with genes as rows and clusters as columns
clusters <- unique(obj@meta.data[[group_by]])
percent_stats <- data.frame(matrix(0, nrow = nvarfeatures, ncol = length(clusters)))
rownames(percent_stats) <- row.names(obj)
colnames(percent_stats) <- clusters
# Calculate initial percentages
initial_percent <- Percent_Expressing(seurat_object = obj, features = row.names(obj)[1:jumpFix], threshold = threshold, group_by = group_by)
percent_stats[rownames(initial_percent), colnames(initial_percent)] <- initial_percent
# Loop with progress bar
for (i in 1:(length(jumpind) - 2)) {
progress(i, max.value = length(jumpind) - 2)
features <- row.names(obj)[(jumpind[i] + 1):jumpind[i + 1]]
temp_percent <- Percent_Expressing(seurat_object = obj, features = features, threshold = threshold, group_by = group_by)
percent_stats[rownames(temp_percent), colnames(temp_percent)] <- temp_percent
}
# Finish progress bar
progress(length(jumpind) - 2, max.value = length(jumpind) - 2)
}else
{
# Define variables
nvarfeatures <- length(varfeatures)
jumpind <- seq(0, nvarfeatures, jumpFix)
# Create an empty data frame with genes as rows and clusters as columns
clusters <- unique(obj@meta.data[[group_by]])
percent_stats <- data.frame(matrix(0, nrow = nvarfeatures, ncol = length(clusters)))
rownames(percent_stats) <- varfeatures
colnames(percent_stats) <- clusters
# Calculate initial percentages
initial_percent <- Percent_Expressing(seurat_object = obj, features = varfeatures[1:jumpFix], threshold = threshold, group_by = group_by)
percent_stats[rownames(initial_percent), colnames(initial_percent)] <- initial_percent
# Loop with progress bar
for (i in 1:(length(jumpind) - 2)) {
progress(i, max.value = length(jumpind) - 2)
features <- varfeatures[(jumpind[i] + 1):jumpind[i + 1]]
temp_percent <- Percent_Expressing(seurat_object = obj, features = features, threshold = threshold, group_by = group_by)
percent_stats[rownames(temp_percent), colnames(temp_percent)] <- temp_percent
}
# Finish progress bar
progress(length(jumpind) - 2, max.value = length(jumpind) - 2)
}
# Calculating u-scores, Pin and Pout
Uscorestats <- t(apply(percent_stats[,which(!(colnames(percent_stats) %in% smallcluster))],1,function(x){ifelse(sort(x/100, decreasing = TRUE)[1] - x/100 == 0,x/100 - sort(x/100, decreasing = TRUE)[2],x/100 - sort(x/100, decreasing = TRUE)[1])})) # (MI-max(MItag))
Pout <- t(apply(percent_stats[,which(!(colnames(percent_stats) %in% smallcluster))],1,function(x){ifelse(sort(x/100, decreasing = TRUE)[1] - x/100 == 0,sort(x/100, decreasing = TRUE)[2],sort(x/100, decreasing = TRUE)[1])})) # (MI-max(MItag))
Pin<- t(apply(percent_stats[,which(!(colnames(percent_stats) %in% smallcluster))],1,function(x){x/100})) # (MI-max(MItag))
Uscoresz <- apply(Uscorestats,2,function(x){(x-mean(x,na.rm = T))/sd(x,na.rm = T)})
order_ind <- sapply(as.list(colnames(Uscoresz)),function(x){names(sort(Uscoresz[,x],decreasing = T))})
# adjusted p-value calculation
UscoreszPvalue <- apply(Uscoresz,2,function(x){p.adjust(1 - pnorm(x),method = method)}) # NEW
###
l <- list()
for(i in colnames(Uscorestats))
{
l[[i]] <- data.frame(Gene = names(sort(Uscorestats[,i],decreasing = T)),
Cluster = i,Uscore =sort(Uscorestats[,i],decreasing = T),
adj.p.value = UscoreszPvalue[names(sort(Uscorestats[,i],decreasing = T)),i],
P_in = Pin[names(sort(Uscorestats[,i],decreasing = T)),i],
P_out = Pout[names(sort(Uscorestats[,i],decreasing = T)),i])
}
l_out <- l[[1]]
for(i in colnames(Uscorestats)[-1])
{
l_out <- rbind(l_out,l[[i]])
}
return(l_out[which( l_out$adj.p.value < p.threshold & l_out$P_in >= P_in.thersh & l_out$P_out <= P_out.thersh ),])
}
library(Umethod)
Umethod::FindUniqueMarkers()
Umethod::FindUniqueMarkers
devtools::install_github("YanuvS/Umethod")
detach("package:Umethod", unload = TRUE)
devtools::install_github("YanuvS/Umethod")
Umethod::FindUniqueMarkers
library(Umethod)
library("scCustomize")
library(cowplot)
library(ggplot2)
library(svMisc)
# Load the published data set (replace with the actual data loading code)
seurat_Full <- readRDS("C:\\Migration\\R projects\\Umethod\\ColonSinglecellDataLeesUmethod.rds")
# Apply Umethod functions, if there are small/mixed clusters, their name should be added to smallcluster variable to omit them.
# The progress bar prints weird massages, in this rmd file I suppress it
genes_list <- suppressMessages(suppressWarnings(
capture.output(FindUniqueMarkers(
obj = seurat_Full,
group_by = "Celltype",
method = "none",
smallcluster = c("CAFelse", "SmallElse")
), file = NULL)
))
# gene_list is the marker list ordered by score and cluster
head(genes_list)
# Choose thresholds
Uscore <- 0.25
p_in <- 0.4
p_out <- 0.3
# Pulling the top 5 markers and the name of the top U marker for each cluster
genesetshort <- unlist(sapply(split(genes_list[genes_list$Uscore > Uscore & genes_list$P_in > p_in & genes_list$P_out < p_out,],genes_list[genes_list$Uscore > Uscore & genes_list$P_in > p_in& genes_list$P_out < p_out,]$Cluster),function(x){x[[1]][1]}))
genesetshort <- unlist(sapply(split(genes_list[genes_list$Uscore > Uscore & genes_list$P_in > p_in & genes_list$P_out < p_out,],genes_list[genes_list$Uscore > Uscore & genes_list$P_in > p_in& genes_list$P_out < p_out,]$Cluster),function(x){x[[1]][1]}))
genes_list
FindUniqueMarkers <- function(obj,
group_by,
p.threshold = 1,
threshold = 0,
P_in.thersh = 0,
P_out.thersh = 1,
varfeatures = NULL,
smallcluster = NULL,
method = "BH",
progresstext = T,
jumpFix = 200) # to fix the assay problem
{
if(is.null(varfeatures))
{
# Define variables
nvarfeatures <- length(row.names(obj))
jumpind <- seq(0, nvarfeatures, jumpFix)
# Create an empty data frame with genes as rows and clusters as columns
clusters <- unique(obj@meta.data[[group_by]])
percent_stats <- data.frame(matrix(0, nrow = nvarfeatures, ncol = length(clusters)))
rownames(percent_stats) <- row.names(obj)
colnames(percent_stats) <- clusters
# Calculate initial percentages
initial_percent <- Percent_Expressing(seurat_object = obj, features = row.names(obj)[1:jumpFix], threshold = threshold, group_by = group_by)
percent_stats[rownames(initial_percent), colnames(initial_percent)] <- initial_percent
# Loop with progress bar
for (i in 1:(length(jumpind) - 2)) {
if(progresstext){progress(i, max.value = length(jumpind) - 2)}
features <- row.names(obj)[(jumpind[i] + 1):jumpind[i + 1]]
temp_percent <- Percent_Expressing(seurat_object = obj, features = features, threshold = threshold, group_by = group_by)
percent_stats[rownames(temp_percent), colnames(temp_percent)] <- temp_percent
}
# Finish progress bar
if(progresstext){progress(length(jumpind) - 2, max.value = length(jumpind) - 2)}
}else
{
# Define variables
nvarfeatures <- length(varfeatures)
jumpind <- seq(0, nvarfeatures, jumpFix)
# Create an empty data frame with genes as rows and clusters as columns
clusters <- unique(obj@meta.data[[group_by]])
percent_stats <- data.frame(matrix(0, nrow = nvarfeatures, ncol = length(clusters)))
rownames(percent_stats) <- varfeatures
colnames(percent_stats) <- clusters
# Calculate initial percentages
initial_percent <- Percent_Expressing(seurat_object = obj, features = varfeatures[1:jumpFix], threshold = threshold, group_by = group_by)
percent_stats[rownames(initial_percent), colnames(initial_percent)] <- initial_percent
# Loop with progress bar
for (i in 1:(length(jumpind) - 2)) {
progress(i, max.value = length(jumpind) - 2)
features <- varfeatures[(jumpind[i] + 1):jumpind[i + 1]]
temp_percent <- Percent_Expressing(seurat_object = obj, features = features, threshold = threshold, group_by = group_by)
percent_stats[rownames(temp_percent), colnames(temp_percent)] <- temp_percent
}
# Finish progress bar
progress(length(jumpind) - 2, max.value = length(jumpind) - 2)
}
# Calculating u-scores, Pin and Pout
Uscorestats <- t(apply(percent_stats[,which(!(colnames(percent_stats) %in% smallcluster))],1,function(x){ifelse(sort(x/100, decreasing = TRUE)[1] - x/100 == 0,x/100 - sort(x/100, decreasing = TRUE)[2],x/100 - sort(x/100, decreasing = TRUE)[1])})) # (MI-max(MItag))
Pout <- t(apply(percent_stats[,which(!(colnames(percent_stats) %in% smallcluster))],1,function(x){ifelse(sort(x/100, decreasing = TRUE)[1] - x/100 == 0,sort(x/100, decreasing = TRUE)[2],sort(x/100, decreasing = TRUE)[1])})) # (MI-max(MItag))
Pin<- t(apply(percent_stats[,which(!(colnames(percent_stats) %in% smallcluster))],1,function(x){x/100})) # (MI-max(MItag))
Uscoresz <- apply(Uscorestats,2,function(x){(x-mean(x,na.rm = T))/sd(x,na.rm = T)})
order_ind <- sapply(as.list(colnames(Uscoresz)),function(x){names(sort(Uscoresz[,x],decreasing = T))})
# adjusted p-value calculation
UscoreszPvalue <- apply(Uscoresz,2,function(x){p.adjust(1 - pnorm(x),method = method)}) # NEW
###
l <- list()
for(i in colnames(Uscorestats))
{
l[[i]] <- data.frame(Gene = names(sort(Uscorestats[,i],decreasing = T)),
Cluster = i,Uscore =sort(Uscorestats[,i],decreasing = T),
adj.p.value = UscoreszPvalue[names(sort(Uscorestats[,i],decreasing = T)),i],
P_in = Pin[names(sort(Uscorestats[,i],decreasing = T)),i],
P_out = Pout[names(sort(Uscorestats[,i],decreasing = T)),i])
}
l_out <- l[[1]]
for(i in colnames(Uscorestats)[-1])
{
l_out <- rbind(l_out,l[[i]])
}
return(l_out[which( l_out$adj.p.value < p.threshold & l_out$P_in >= P_in.thersh & l_out$P_out <= P_out.thersh ),])
}
genes_list <- FindUniqueMarkers(obj = seurat_Full,group_by = "Celltype",method = "none",
smallcluster = c("CAFelse","SmallElse"),progresstext = F)
genes_list
genes_list <- FindUniqueMarkers(obj = seurat_Full,group_by = "Celltype",method = "none",
smallcluster = c("CAFelse","SmallElse"),progresstext = T)
devtools::install_github("YanuvS/Umethod")
detach("package:Umethod", unload = TRUE)
devtools::install_github("YanuvS/Umethod")
library(Umethod)
Umethod::FindUniqueMarkers
rmarkdown::render("README.Rmd", output_format = "md_document")
seurat_Full <- readRDS("C:\\Migration\\R projects\\Umethod\\ColonSinglecellDataLeesUmethod.rds")
set.seed(123)  # For reproducibility
# Subsample 10% of the cells
subsampled_cells <- sample(Cells(seurat_Full ), size = floor(0.1 * ncol(seurat_Full )))
# Subset the Seurat object
seurat_subsampled <- subset(seurat_Full, cells = subsampled_cells)
seurat_subsampled
seurat_Full
saveRDS("C:\\Migration\\R projects\\Umethod\\ColonSinglecellDataLeesUmethodSubsampled10.rds")
saveRDS(seurat_subsampled ,"C:\\Migration\\R projects\\Umethod\\ColonSinglecellDataLeesUmethodSubsampled10.rds")
seurat_Full <- readRDS("data/ColonscdataLeesUmethod.rds")
seurat_Full <- readRDS("data/ColonSinglecellDataLeesUmethodSubsampled10.rds")
genes_list <- FindUniqueMarkers(
obj = seurat_Full,
group_by = "Celltype",
method = "none",
smallcluster = c("CAFelse", "SmallElse"),
progresstext = F)
head(genes_list)
# Choose thresholds
Uscore <- 0.25
p_in <- 0.4
p_out <- 0.3
# Pulling the top 5 markers and the name of the top U marker for each cluster
genesetshort <- unlist(sapply(split(genes_list[genes_list$Uscore > Uscore & genes_list$P_in > p_in & genes_list$P_out < p_out,],genes_list[genes_list$Uscore > Uscore & genes_list$P_in > p_in& genes_list$P_out < p_out,]$Cluster),function(x){x[[1]][1]}))
genesetlong <- unique(unlist(sapply(split(genes_list[genes_list$Uscore > Uscore & genes_list$P_in > p_in& genes_list$P_out < p_out,],genes_list[genes_list$Uscore > Uscore & genes_list$P_in > p_in& genes_list$P_out < p_out,]$Cluster),function(x){x[[1]][1:5]})))
genesetlong
clusterorder<- c("CAF","General.Fibro","Adamdec1.Fibro","Normal.Muscle","Sox6..Stroma","CAP.else","Endothelial","Macrofague","T.cells","B.cells","Plasma","Epithelial","Cancer")
# Ordering the clusters that had any umarkers from genesetlong for dotplot
indclusters <- rep(NA,dim(genesetlong)[2])
for(i in 1:dim(genesetlong)[2]){indclusters[i] <- which(colnames(genesetlong) == clusterorder[i])}
genesetlong <- genesetlong[,indclusters]
genesetshort <- genesetshort[indclusters]
plot_grid(plot_grid(DimPlot(object = seurat_Full, reduction = "UMAP_on_harmony",pt.size = 0.5, group.by = "Celltype"),
DotPlot(seurat_Full,features = c(genesetlong),group.by = "Celltype",scale = F) + theme(axis.text.x = element_text(angle = 90,vjust = -0.0001)),ncol = 1),
FeaturePlot(object = seurat_Full, features = genesetshort, cols = c("gray", "blue"),reduction = "UMAP_on_harmony",ncol = 3,order = T),ncol = 2)
rmarkdown::render("README.Rmd", output_format = "md_document")
git log --oneline
remotes::install_github("samuel-marsh/scCustomize")
devtools::check()
devtools::check()
devtools::check()
rmarkdown::render("NEWS.rmd", output_format = "md_document")
devtools::document() # Update documentation
devtools::build()
devtools::build()
rmarkdown::render("NEWS.rmd", output_format = "md_document")
version
rmarkdown::render("README.rmd", output_format = "md_document")
remotes::install_github("YanuvS-Dev/Umethod")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
remotes::install_github("YanuvS-Dev/Umethod")
devtools::build()
devtools::check()
devtools::check()
devtools::check()
remove.packages("Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
devtools::check()
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remove.packages("Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remove.packages("Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remove.packages("Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
devtools::check(cran = TRUE)
usethis::use_gpl3_license()
devtools::check()
devtools::document()
devtools::document()
devtools::check_cran()
devtools::check(remote = TRUE, cran = TRUE)
dir.create("inst/extdata", recursive = TRUE, showWarnings = FALSE)
file.copy("data/ColonSinglecellDataLeesUmethodSubsampled10.rds", "inst/extdata/")
importFrom(dplyr, %>%)
devtools::check(remote = TRUE, cran = TRUE)
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod",force = T)
detach("package:Umethod", unload = TRUE)
remotes::install_github("YanuvS-Dev/Umethod",force = T)
seurat_Full <- readRDS(system.file("extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod"))
devtools::build()
remove.packages("Umethod")
detach("package:Umethod", unload = TRUE)
remotes::install_github("YanuvS-Dev/Umethod")
seurat_Full <- readRDS(system.file("extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod"))
file.exists(system.file("inst\extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod"))
file.exists(system.file("inst/extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod"))
file.exists(system.file("extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod"))
readRDS("inst/extdata/ColonSinglecellDataLeesUmethodSubsampled10.rds")
system.file("extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod")
system.file("extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
system.file("extdata", "ColonSinglecellDataLeesUmethodSubsampled10.rds", package = "Umethod")
rds_url <- "https://github.com/YanuvS-Dev/Umethod/raw/master/inst/extdata/ColonSinglecellDataLeesUmethodSubsampled10.rds"
seurat_Full <- readRDS(url(rds_url, "rb"))
rds_url <- "https://github.com/YanuvS-Dev/Umethod/raw/master/inst/extdata/ColonSinglecellDataLeesUmethodSubsampled10.rds"seurat_Full <- readRDS(url(rds_url, "rb"))
rmarkdown::render("README.rmd", output_format = "md_document")
devtools::document()
devtools::build()
devtools::check(remote = TRUE, cran = TRUE)
file.rename("h origin master", "h_origin_master")
unlink("data", recursive = TRUE)
package_directory <- "." # Or specify the actual path if it's not the current directory
all_files <- list.files(package_directory, recursive = TRUE) # recursive = TRUE lists files in subdirectories
print(all_files)
Lotto <- read.csv("C:/Users/yanuv/Downloads/Lotto.csv", comment.char="#")
seurat_Full <- readRDS("C:/Users/yanuv/Downloads/StromaldataHarmonized.rds")
genes_list <- FindUniqueMarkers(
obj = seurat_Full,
group_by = "RNA_snn_res.0.15",
method = "none")
genes_list
rds_url <- "https://github.com/YanuvS-Dev/Umethod/raw/master/inst/extdata/ColonSinglecellDataLeesUmethodSubsampled10.rds"
seurat_Full <- readRDS(url(rds_url, "rb"))
genes_list <- FindUniqueMarkers(
obj = seurat_Full,
group_by = "Celltype",
method = "none",
smallcluster = c("CAFelse", "SmallElse"))
genes_list
head(genes_list)
seurat_Full <- readRDS("C:/Users/yanuv/Downloads/StromaldataHarmonized.rds")
obj <- seurat_Full
group_by <- RNA_snn_res.0.15
group_by <- "RNA_snn_res.0.15"
p.threshold = 1
threshold = 0
P_in.thersh = 0
P_out.thersh = 1
varfeatures = NULL
smallcluster = NULL
method = "BH"
progresstext = T
jumpFix = 200
# Define variables
nvarfeatures <- length(row.names(obj))
jumpind <- seq(0, nvarfeatures, jumpFix)
# Create an empty data frame with genes as rows and clusters as columns
clusters <- unique(obj@meta.data[[group_by]])
percent_stats <- data.frame(matrix(0, nrow = nvarfeatures, ncol = length(clusters)))
rownames(percent_stats) <- row.names(obj)
colnames(percent_stats) <- clusters
# Calculate initial percentages
initial_percent <- Percent_Expressing(seurat_object = obj, features = row.names(obj)[1:jumpFix], threshold = threshold, group_by = group_by)
percent_stats[rownames(initial_percent), colnames(initial_percent)] <- initial_percent
# Loop with progress bar
for (i in 1:(length(jumpind) - 2)) {
if(progresstext){progress(i, max.value = length(jumpind) - 2)}
features <- row.names(obj)[(jumpind[i] + 1):jumpind[i + 1]]
temp_percent <- Percent_Expressing(seurat_object = obj, features = features, threshold = threshold, group_by = group_by)
percent_stats[rownames(temp_percent), colnames(temp_percent)] <- temp_percent
}
percent_stats
obj@meta.data
obj@meta.data[[group_by]]
percent_stats
# Create an empty data frame with genes as rows and clusters as columns
clusters <- unique(obj@meta.data[[group_by]])
clusters
group_by
obj@meta.data[[group_by]]
data.frame(matrix(0, nrow = nvarfeatures, ncol = length(clusters)))
unique(obj@meta.data[[group_by]])
as.character(unique(obj@meta.data[[group_by]]))
# Create an empty data frame with genes as rows and clusters as columns
clusters <- as.character(unique(obj@meta.data[[group_by]]))
percent_stats <- data.frame(matrix(0, nrow = nvarfeatures, ncol = length(clusters)))
percent_stats
rownames(percent_stats) <- row.names(obj)
colnames(percent_stats) <- clusters
# Calculate initial percentages
initial_percent <- Percent_Expressing(seurat_object = obj, features = row.names(obj)[1:jumpFix], threshold = threshold, group_by = group_by)
percent_stats[rownames(initial_percent), colnames(initial_percent)] <- initial_percent
# Loop with progress bar
for (i in 1:(length(jumpind) - 2)) {
if(progresstext){progress(i, max.value = length(jumpind) - 2)}
features <- row.names(obj)[(jumpind[i] + 1):jumpind[i + 1]]
temp_percent <- Percent_Expressing(seurat_object = obj, features = features, threshold = threshold, group_by = group_by)
percent_stats[rownames(temp_percent), colnames(temp_percent)] <- temp_percent
}
percent_stats
remove.packages("Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
remotes::install_github("YanuvS-Dev/Umethod")
library(Umethod)
library(Umethod)
