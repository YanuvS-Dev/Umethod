omitCluster = c("CAFelse", "SmallElse"))
genes_list
devtools::load_all(".")
genes_list <- FindUniqueMarkers(
obj = seurat_Full,
group_by = "Celltype",
method = "BH",
omitCluster = c("CAFelse", "SmallElse"))
genes_list
devtools::load_all(".")
genes_list <- FindUniqueMarkers(
obj = seurat_Full,
group_by = "Celltype",
method = "BH",
omitCluster = c("CAFelse", "SmallElse"))
names(genes_list)
genes_list <- FindUniqueMarkers(
obj = seurat_Full,
group_by = "Celltype",
omitCluster = c("CAFelse", "SmallElse"))
names(genes_list)
genesetlong <- unique(unlist(sapply(
split(genes_list[genes_list$Uscore > Uscore & genes_list$P_in > p_in, ],
genes_list[genes_list$Uscore > Uscore & genes_list$P_in > p_in, ]$Cluster),
function(x) { x[[1]][1:5] }
)))
genesetlong
class(genesetlong)
#' U-Method: Find Unique Markers
#'
#' Identifies the most distinct markers for each cluster in a Seurat object using the U-method.
#'
#' @param obj A Seurat object with cluster assignments.
#' @param group_by The metadata column containing cluster labels.
#' @param p.threshold The p-value or adjusted p-value threshold. Default is 1.
#' @param threshold The expression cutoff above which a gene is considered expressed in a cell. Default is 0.
#' @param P_in.thersh Minimum probability of gene expression within a cluster for inclusion. Default is 0.
#' @param P_out.thersh Maximum probability of gene expression in other clusters for filtering. Default is 1.
#' @param varfeatures A vector of genes to include in the analysis. Defaults to the 2000 most variable genes if NULL.
#' @param omitCluster A vector of cluster names to exclude, useful for omitting small or mixed clusters.
#' @param method P-value adjustment method. Set to "none" for raw p-values. Default is "none".
#' @param Uscore Minimum U-score threshold for `gene_set`. Default is 0.
#' @param n Number of genes per cluster to include in `gene_set`. Default is 3.
#'
#' @return A list with:
#'   - gene_list_long: long-form marker table (data.frame)
#'   - gene_set: top `n` markers per cluster (matrix)
#' @export
FindUniqueMarkers <- function(obj,
group_by,
p.threshold = 1,
threshold = 0,
P_in.thersh = 0,
P_out.thersh = 1,
varfeatures = NULL,
omitCluster = NULL,
method = "none",
Uscore = 0,
n = 3) {
expr_matrix <- if (class(obj[["RNA"]])[1] == "Assay5") {
obj@assays$RNA@layers$counts
} else {
obj@assays$RNA@counts
}
groups <- obj@meta.data[[group_by]]
if (is.null(varfeatures)) {
varfeatureschoose <- rownames(obj)
}
binary_matrix <- expr_matrix[row.names(obj) %in% varfeatureschoose, ] > threshold
if (any("factor" %in% class(groups))) {
clusters <- levels(groups)
} else {
clusters <- unique(groups)
}
percent_stats <- sapply(clusters, function(cluster) {
Matrix::rowMeans(binary_matrix[, groups == cluster]) * 100
})
rownames(percent_stats) <- varfeatureschoose
colnames(percent_stats) <- clusters
if (is.null(omitCluster)) {
ind_column <- 1:length(clusters)
} else {
ind_column <- c(1:length(clusters))[-which(colnames(percent_stats) %in% omitCluster)]
}
Uscorestats <- t(apply(percent_stats[, ind_column], 1, function(x) {
sorted_x <- sort(x / 100, decreasing = TRUE)
x / 100 - ifelse(sorted_x[1] == x / 100, sorted_x[2], sorted_x[1])
}))
Pout <- t(apply(percent_stats[, ind_column], 1, function(x) {
sorted_x <- sort(x / 100, decreasing = TRUE)
ifelse(sorted_x[1] == x / 100, sorted_x[2], sorted_x[1])
}))
Pin <- t(apply(percent_stats, 1, function(x) x / 100))
Uscoresz <- apply(Uscorestats, 2, function(x) {
(x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
})
raw_pvals <- apply(Uscoresz, 2, function(x) 1 - pnorm(x))
if (method == "none") {
pval_matrix <- raw_pvals
pval_column <- "p.value"
} else {
pval_matrix <- apply(raw_pvals, 2, function(x) p.adjust(x, method = method))
pval_column <- "adj.p.value"
}
l_out <- do.call(rbind, lapply(colnames(Uscorestats), function(i) {
df <- data.frame(
Gene = rownames(Uscorestats),
Cluster = i,
Uscore = Uscorestats[, i],
P_in = Pin[, i],
P_out = Pout[, i],
stringsAsFactors = FALSE
)
df[[pval_column]] <- pval_matrix[, i]
return(df)
}))
# Filter for gene_list_long
l_out <- l_out[l_out[[pval_column]] < p.threshold &
l_out$P_in >= P_in.thersh &
l_out$P_out <= P_out.thersh, ]
# Cluster ordering
l_out$Cluster <- factor(l_out$Cluster, levels = levels(obj@meta.data[[group_by]]))
l_out <- l_out[order(l_out$Cluster, -l_out$Uscore), ]
rownames(l_out) <- NULL
# Create gene_set (wide format top-n genes per cluster)
gene_set_table <- l_out[
l_out$Uscore > Uscore &
l_out$P_in >= P_in.thersh &
l_out$P_out <= P_out.thersh &
l_out[[pval_column]] < p.threshold, ]
gene_split <- split(gene_set_table, gene_set_table$Cluster)
gene_set <- do.call(cbind, lapply(gene_split, function(df) {
head(df$Gene, n)
}))
return(list(
gene_list_long = l_out,
gene_set = gene_set
))
}
rm(list = c("FindUniqueMarkers"))
devtools::load_all(".")
genes_list <- FindUniqueMarkers(
obj = seurat_Full,
group_by = "Celltype",
omitCluster = c("CAFelse", "SmallElse"))
class(genes_list)
class(genes_list[[1]])
genes_list[[1]]
genes_list$gene_set
devtools::load_all(".")
library(arrow)
colon.data <- Read10X("C:/myGithub/Uemethod_Bigfiles/VisiumHDcolon/NAT5/8um/filtered_feature_bc_matrix/")
poaraq <- read_parquet("C:/myGithub/Uemethod_Bigfiles/VisiumHDcolon/NAT5/8um/spatial/tissue_positions.parquet")
devtools::load_all(".")
seurat_object <- CreateImageData(bc_matrix = colon.data,poaraq = poaraq,markers = c(genes_list$gene_set))
names(seurat_object)
names(seurat_object@meta.data)
devtools::load_all(".")
seurat_object <- CreateImageData(counts_matrix = colon.data,poaraq = poaraq,markers = c(genes_list$gene_set))
names(seurat_object)
names(seurat_object@meta.data)
counts_matrix = colon.data
poaraq = poaraq
markers = c(genes_list$gene_set)
# Create base Seurat object
seurat_object <- CreateSeuratObject(
counts = counts_matrix,
assay = "Spatial",
project = ifelse(is.null(project), "Visium & U-Method Project", project)
)
# Align metadata using match for ordered merge
cell_metadata <- poaraq[match(colnames(seurat_object), poaraq$barcode), ]
colnames(cell_metadata)[colnames(cell_metadata) == "barcode"] <- "cell_id"
rownames(cell_metadata) <- cell_metadata$cell_id
!is.null(markers)
sapply(markers, function(m) {
if (m %in% rownames(counts_matrix)) return(m)
base <- sub("\\.[0-9]+$", "", m)
matched <- grep(paste0("^", base, "\\.[0-9]+$"), rownames(counts_matrix), value = TRUE)
if (length(matched) == 1) return(matched)
return(NA_character_)
}, USE.NAMES = FALSE)
base
# Robust match: use .1/.2/etc when needed, then clean for metadata labeling
marker_lookup <- sapply(markers, function(m) {
if (m %in% rownames(counts_matrix)) return(m)
base <- sub("\\.[0-9]+$", "", m)
matched <- grep(paste0("^", base, "\\.[0-9]+$"), rownames(counts_matrix), value = TRUE)
if (length(matched) == 1) return(matched)
return(NA_character_)
}, USE.NAMES = FALSE)
marker_lookup
markers
lapply(markers, function(m) {
if (m %in% rownames(counts_matrix)) return(m)
base <- sub("\\.[0-9]+$", "", m)
matched <- grep(paste0("^", base, "\\.[0-9]+$"), rownames(counts_matrix), value = TRUE)
if (length(matched) == 1) return(matched)
return(NA_character_)
}, USE.NAMES = FALSE)
# Robust match: use .1/.2/etc when needed, then clean for metadata labeling
marker_lookup <- lapply(markers, function(m) {
if (m %in% rownames(counts_matrix)) return(m)
base <- sub("\\.[0-9]+$", "", m)
matched <- grep(paste0("^", base, "\\.[0-9]+$"), rownames(counts_matrix), value = TRUE)
if (length(matched) == 1) return(matched)
return(NA_character_)
})
marker_lookup
which(substr(markers,nchar(markers)-2,nchar(markers)) == ".1")
substr(markers,nchar(markers)-2,nchar(markers))
which(substr(markers,nchar(markers)-1,nchar(markers)) == ".1")
corrmark <- which(substr(markers,nchar(markers)-1,nchar(markers)) == ".1")
length(corrmark) > 0
corrmark <- which(substr(markers,nchar(markers)-1,nchar(markers)) == ".2")
length(corrmark) > 0
corrmark <- which(substr(markers,nchar(markers)-1,nchar(markers)) == ".1")
markers[corrmark]
rownames(cell_metadata)
colnames(cell_metadata)
rownames(counts_matrix)
ifelse(substr(markers[corrmark],nchar(markers)-1,nchar(markers)) %in% rownames(counts_matrix),substr(markers[corrmark],nchar(markers)-1,nchar(markers)),NA)
ifelse(substr(markers[corrmark],1,nchar(markers)-2) %in% rownames(counts_matrix),substr(markers[corrmark],nchar(markers)-1,nchar(markers)),NA)
substr(markers[corrmark],1,nchar(markers)-2)
substr(markers[corrmark],1,nchar(markers)-1)
markers[corrmark]
ifelse(substr(markers[corrmark],1,nchar(markers[corrmark])-1) %in% rownames(counts_matrix),substr(markers[corrmark],nchar(markers)-1,nchar(markers)),NA)
substr(markers[corrmark],1,nchar(markers[corrmark])-1)
substr(markers[corrmark],1,nchar(markers[corrmark])-2)
ifelse(substr(markers[corrmark],1,nchar(markers[corrmark])-2) %in% rownames(counts_matrix),substr(markers[corrmark],nchar(markers)-1,nchar(markers)),NA)
substr(markers[corrmark],1,nchar([corrmark])-2)
substr(markers[corrmark],1,nchar(markers[corrmark])-2)
ifelse(substr(markers[corrmark],1,nchar(markers[corrmark])-2) %in% rownames(counts_matrix),substr(markers[corrmark],1,nchar(markers[corrmark])-2),NA)
devtools::load_all(".")
seurat_object <- CreateImageData(counts_matrix = colon.data,poaraq = poaraq,markers = c(genes_list$gene_set))
names(seurat_object@meta.data)
devtools::load_all(".")
datainput_control <- UmethodSignatureMap(
seurat_object = seurat_object,
gene_set = UmethodResults$gene_set
)
devtools::document()
devtools::load_all(".")
datainput_control <- UmethodSignatureMap(
seurat_object = seurat_object,
gene_set = UmethodResults$gene_set
)
UmethodResults <- FindUniqueMarkers(
obj = seurat_Full,
group_by = "Celltype",
method = "BH",
omitCluster = c("CAFelse", "SmallElse"))
datainput_control <- UmethodSignatureMap(
seurat_object = seurat_object,
gene_set = UmethodResults$gene_set
)
g_control <- list()
for(i in datainput_control[[3]])
{
g_control[[which(datainput_control[[3]] == i)]] <- ggplot(datainput_control[[2]][datainput_control[[2]]$Class == i&!is.na(datainput_control[[2]]$value),],aes(x = pxl_col_in_fullres,y = pxl_row_in_fullres,color = Class,alpha = value/max(value))) + geom_point(size = 0.01) + theme_void() +scale_y_reverse()+
guides(colour = guide_legend(override.aes = list(size=10))) +labs(title = "")+
scale_color_manual(values = datainput_control[[4]][which(datainput_control[[3]] == i)]) +
theme(
plot.background = element_rect(fill = "black"),
legend.position = "right", # Place legend to the right outside the plot
legend.justification = "center", # Center-align the legend vertically
legend.box.margin = margin(0, 10, 0, 10), # Add space between legend and plot
plot.margin = margin(10, 20, 10, 10), # Increase margin to the right for the legend
legend.text = element_text(color = "white", face = "bold", family = "sans", size = 20, angle = 90))+ scale_alpha(guide = 'none')
}
gg1_visium <- plot_grid(g_control[[1]],g_control[[2]],g_control[[3]],g_control[[4]],g_control[[5]],g_control[[6]],g_control[[7]],g_control[[8]],g_control[[11]],ncol = 3)
gg1_visium
,g_control[[6]]
g_control[[6]]
devtools::load_all(".")
devtools::load_all(".")
library(cowplot)
library(ggplot2)
library(svMisc)
library(Seurat)
library(reshape2)
library(arrow)
# Load the published dataset
rds_url <- "https://github.com/YanuvS-Dev/Umethod/raw/master/inst/extdata/ColonSinglecellDataLeesUmethodSubsampled10.rds"
seurat_Full <- readRDS(url(rds_url, "rb"))
devtools::load_all(".")
library(cowplot)
library(ggplot2)
library(svMisc)
library(Seurat)
library(reshape2)
library(arrow)
# Load the published dataset
rds_url <- "https://github.com/YanuvS-Dev/Umethod/raw/master/inst/extdata/ColonSinglecellDataLeesUmethodSubsampled10.rds"
seurat_Full <- readRDS(url(rds_url, "rb"))
counts_matrix <- Read10X("C:/myGithub/Uemethod_Bigfiles/VisiumHDcolon/NAT5/8um/filtered_feature_bc_matrix/")
poaraq <- read_parquet("C:/myGithub/Uemethod_Bigfiles/VisiumHDcolon/NAT5/8um/spatial/tissue_positions.parquet")
seurat_object <- CreateImageData(
counts_matrix = counts_matrix,
poaraq = poaraq,
markers = c(UmethodResults$gene_set)
)
UmethodResults <- FindUniqueMarkers(
obj = seurat_Full,
group_by = "Celltype",
method = "BH",
omitCluster = c("CAFelse", "SmallElse")
)
seurat_object <- CreateImageData(
counts_matrix = counts_matrix,
poaraq = poaraq,
markers = c(UmethodResults$gene_set)
)
datainput_control <- UmethodSignatureMap(
seurat_object = seurat_object,
gene_set = UmethodResults$gene_set
)
g <- list()
for (i in datainput_control$Classlist) {
index <- which(datainput_control$Classlist == i)
g[[index]] <- ggplot(
datainput_control$signatureLong[
datainput_control$signatureLong$Class == i &
!is.na(datainput_control$signatureLong$value),
],
aes(
x = pxl_col_in_fullres,
y = pxl_row_in_fullres,
color = Class,
alpha = value / max(value)
)
) +
geom_point(size = 0.01) +
theme_void() +
scale_y_reverse() +
scale_color_manual(values = datainput_control$signature_colors[index]) +
theme(
plot.background = element_rect(fill = "black"),
legend.position = "right",
legend.text = element_text(color = "white", face = "bold", size = 20, angle = 90)
) +
scale_alpha(guide = "none")
}
# Reorder plot list: put Epithelial and Cancer first (manually found positions)
g_reordered <- c(g[[11]], g[[12]], g[[1]], g[[2]], g[[3]], g[[4]], g[[5]], g[[7]], g[[8]], g[[9]], g[[10]])
plot_grid(plotlist = g_reordered, ncol = 3)
warnings()
g[[1]]
# Reorder plot list: put Epithelial and Cancer first (manually found positions)
plot_grid(g[[11]], g[[12]], g[[1]], g[[2]], g[[3]], g[[4]], g[[5]], g[[7]], g[[8]], g[[9]], g[[10]], ncol = 3)
plot_grid(g[[11]], g[[12]], g[[1]], g[[2]], g[[3]], g[[4]], g[[5]], g[[7]], g[[8]], g[[9]], g[[10]], ncol = 3)
datainput_control$Classlist
plot_grid(g[[12]], g[[13]], g[[1]], g[[2]], g[[3]], g[[4]], g[[5]], g[[7]], g[[8]], g[[9]], g[[10]],g[[11]], ncol = 3)
gk <- list()
for (i in datainput_control$Classlist) {
index <- which(datainput_control$Classlist == i)
g[[index]] <- ggplot(
datainput_control$signatureLong[
datainput_control$signatureLong$Class == i &
!is.na(datainput_control$signatureLong$value),
],
aes(
x = pxl_col_in_fullres,
y = pxl_row_in_fullres,
color = Class,
alpha = value / max(value)
)
) +
geom_point(size = 0.01) +
theme_void() +
scale_y_reverse() +
scale_color_manual(values = datainput_control$signature_colors[index]) +
theme(
plot.background = element_rect(fill = "black"),
legend.position = "right",
legend.text = element_text(color = "white", face = "bold", size = 20, angle = 90)
) +
scale_alpha(range = c(0.3, 1), guide = "none")
}
g[[1]]
gk[[1]]
g <- list()
for (i in datainput_control$Classlist) {
index <- which(datainput_control$Classlist == i)
g[[index]] <- ggplot(
datainput_control$signatureLong[
datainput_control$signatureLong$Class == i &
!is.na(datainput_control$signatureLong$value),
],
aes(
x = pxl_col_in_fullres,
y = pxl_row_in_fullres,
color = Class,
alpha = value / max(value)
)
) +
geom_point(size = 0.01) +
theme_void() +
scale_y_reverse() +
scale_color_manual(values = datainput_control$signature_colors[index]) +
theme(
plot.background = element_rect(fill = "black"),
legend.position = "right",
legend.text = element_text(color = "white", face = "bold", size = 20, angle = 90)
) +
scale_alpha(guide = "none")
}
g[[1]]
g <- list()
for (i in datainput_control$Classlist) {
index <- which(datainput_control$Classlist == i)
g[[index]] <- ggplot(
datainput_control$signatureLong[
datainput_control$signatureLong$Class == i &
!is.na(datainput_control$signatureLong$value),
],
aes(
x = pxl_col_in_fullres,
y = pxl_row_in_fullres,
color = Class,
alpha = value / max(value)
)
) +
geom_point(size = 0.05) +
theme_void() +
scale_y_reverse() +
scale_color_manual(values = datainput_control$signature_colors[index]) +
theme(
plot.background = element_rect(fill = "black"),
legend.position = "right",
legend.text = element_text(color = "white", face = "bold", size = 20, angle = 90)
) +
scale_alpha(guide = "none")
}
g[[1]]
g <- list()
for (i in datainput_control$Classlist) {
index <- which(datainput_control$Classlist == i)
g[[index]] <- ggplot(
datainput_control$signatureLong[
datainput_control$signatureLong$Class == i &
!is.na(datainput_control$signatureLong$value),
],
aes(
x = pxl_col_in_fullres,
y = pxl_row_in_fullres,
color = Class,
alpha = value / max(value)
)
) +
geom_point(size = 0.1) +
theme_void() +
scale_y_reverse() +
scale_color_manual(values = datainput_control$signature_colors[index]) +
theme(
plot.background = element_rect(fill = "black"),
legend.position = "right",
legend.text = element_text(color = "white", face = "bold", size = 20, angle = 90)
) +
scale_alpha(guide = "none")
}
g[[1]]
g <- list()
for (i in datainput_control$Classlist) {
index <- which(datainput_control$Classlist == i)
g[[index]] <- ggplot(
datainput_control$signatureLong[
datainput_control$signatureLong$Class == i &
!is.na(datainput_control$signatureLong$value),
],
aes(
x = pxl_col_in_fullres,
y = pxl_row_in_fullres,
color = Class,
alpha = value / max(value)
)
) +
geom_point(size = 1) +
theme_void() +
scale_y_reverse() +
scale_color_manual(values = datainput_control$signature_colors[index]) +
theme(
plot.background = element_rect(fill = "black"),
legend.position = "right",
legend.text = element_text(color = "white", face = "bold", size = 20, angle = 90)
) +
scale_alpha(guide = "none")
}
g[[1]]
# Reorder plot list: put Epithelial and Cancer first (manually found positions)
plot_grid(g[[12]], g[[13]], g[[1]], g[[2]], g[[3]], g[[4]], g[[5]], g[[7]], g[[8]], g[[9]], g[[10]],g[[11]], ncol = 3)
plot_grid(g[[12]], g[[13]], g[[1]], g[[2]], g[[3]], g[[4]], g[[5]], g[[7]], g[[8]], g[[9]], g[[10]],g[[11]], ncol = 3)
rmarkdown::render("README.Rmd", output_format = "md_document")
library(cowplot)
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::build()
devtools::document()
roxygen2::roxygenise()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
detach("package:Umethod", unload = TRUE, character.only = TRUE)
devtools::install_github("YanuvS-Dev/Umethod")
rmarkdown::render("README.Rmd", output_format = "md_document")
